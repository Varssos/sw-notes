Pseudo-random number generation
===============================

`cppreference random <https://en.cppreference.com/w/cpp/header/random>`_ 

`Described how random works in C++11 <https://stackoverflow.com/questions/7114043/random-number-generation-in-c11-how-to-generate-how-does-it-work>`_ 

C++11 pseudo-random number generation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: cpp

    #include <iostream>
    #include <random>

    int main()
    {

        // 1.Create random device
        std::random_device dev;

        // 2.Create random number generator
        // std::minstd_rand0 rng(dev());
        // std::minstd_rand rng(dev());
        std::mt19937 rng(dev());
        // ...
        
        // 3.Create random distribution 
        std::uniform_int_distribution<> dist( 1, 6 );
        // std::uniform_real_distribution<> dist(1.0, 6.0); // distribution in range [1, 6]
        // std::bernoulli_distribution dist(0.5);
        // ... More here: https://en.cppreference.com/w/cpp/numeric/random#Random_number_distributions
        
        std::cout << dist(rng);

        return 0;
    }

C random library
~~~~~~~~~~~~~~~~

Header: ``<cstdlib>``

- ``rand()`` Generates a pseudo-random number
- ``srand( unsigned seed )`` Seeds pseudo-random number generator
- ``RAND_MAX`` Maximum possible value generated by ``std::rand`` 

.. code-block:: cpp

    #include <cstdlib>
    #include <iostream>
    #include <ctime>
    
    int main() 
    {
        std::srand(std::time(nullptr)); // use current time as seed for random generator
        int random_variable = std::rand();
        std::cout << "Random value on [0 " << RAND_MAX << "]: " 
                << random_variable << '\n';
    
        // roll 6-sided dice 20 times
        for (int n=0; n != 20; ++n) {
            int x = 7;
            while(x > 6) 
                x = 1 + std::rand()/((RAND_MAX + 1u)/6);  // Note: 1+rand()%6 is biased
            std::cout << x << ' ';
        }
    }
    // Possible output
    // Random value on [0 2147483647]: 726295113
    // 6 3 6 2 6 5 6 3 1 1 1 6 6 6 4 1 3 6 4 2

